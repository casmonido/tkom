<StringLit> ::= ‘’’ (#x20 - #x7e)* ‘’’
<BooleanLit> ::= <trueKw> | <falseKw>
<IntegerLit> ::= [‘-’]( [0-9] )+ 
<RealLit> ::= [‘-’]( [0-9] )+ ‘.’ ( [0-9] )+ 
<comment> ::= ‘--’ (#x20 - #x7e)* #x0a

<nameStartChar> ::= [a-z] | [A-Z] 
<nameChar> ::= <nameStartChar> | [0-9] | ‘_’
<simpleName> ::= <nameStartChar> <nameChar>*

<atom> ::= ‘keyword’
<ifKw> ::= ‘if’
<thenKw> ::= ‘then’
<elseKw> ::= ‘else’
<endifKw> ::= ‘endif’

<setKw> ::= ‘Set’
<bagKw> ::= ‘Bag’ 
<seqKw> ::= ‘Sequence’ 
<collKw> ::= ‘Collection’
<ordsetKw> ::= ‘OrderedSet’

<boolKw> ::= ‘Boolean’ 
<intKw> ::= ‘Integer’ 
<realKw> ::= ‘Real’
<strKw> ::= ‘String’ 

<domKw> ::= ‘domain’
<domPKw> ::= ‘primitive’ 
<domEKw> ::= ‘enforce’
<domCKw> ::= ‘checkonly’

<transKw> ::= ‘transformation’
<topKw> ::= ‘top’ 
<relKw> ::= ‘relation’
<querKw> ::= ‘query’
<whenKw> ::= ‘when’
<whereKw> ::= ‘where’

<trueKw> ::= ‘true’
<falseKw> ::= ‘false;
<andOp> ::= ‘and’
<orOp> ::= ‘or’
<nullKw> ::= ‘null’

<colon> ::= ‘:’
<namspOp> ::= ‘::’ 
<lparent> ::= ‘(‘
<rparent> ::= ‘)’
<lbracket> ::= ‘{‘
<rbracket> ::= ‘}’
<comma> ::= ‘,’
<semicol> := ‘;’

<plus> ::= ‘+’
<minus> ::= ‘-’
<multOp> ::= ‘*’
<divOp> ::= ‘/’
<dot> ::= ‘.’

<relOp> ::= '=' | '<' | '>' | '<=' | '<>' | '>='

<boolOp> ::= ‘and’ | ‘or’

<arytmOp> ::= ‘+’ | ‘-’ | '*'

<realOp> ::= ‘+’ | ‘-’ | ‘/’ | ‘*’

<collectionTypeIdentifier> ::= ‘Set’ | ‘Bag’ | ‘Sequence’ | ‘Collection’ | ‘OrderedSet’

<primitiveType> ::= ‘Boolean’ | ‘Integer’ | ‘Real’ | ‘String’ 

<BooleanLit> ::= 'true' | 'false'




<transformation> ::= ‘transformation’ <simpleName> ‘(‘ <modelDecl>‘,’ <modelDecl> ‘)’ ‘{‘ (<relation> | <query>)* ‘}’

<relation> ::= [‘top’] ‘relation’ <simpleName> ‘{‘ <varDeclaration>* (<domain> | <prmitiveTypeDomain>)+ [<when>] [<where>] ‘}’

<query> ::= ‘query’ <simpleName> ‘(‘ [<para> (‘,’ <para>)*] ‘)’‘:’ <type> ‘{‘ (<OclExpression> ‘;’)* ‘}’

<when> ::= ‘when’ ‘{‘ (<OclExpression> ‘;’)* ‘}’

<where> ::= ‘where’ ‘{‘ (<OclExpression> ‘;’)* ‘}’



<IfExp> ::= ‘if’ ‘(‘ <OclExpression> ‘)’ ‘then’ <OclExpression> [‘else’ <OclExpression>] ‘endif’

<domain> ::= (‘checkonly’ | ‘enforce’) ‘domain’ <simpleName> <objectTemplate> ‘;’

<primitiveTypeDomain> := ‘primitive’ ‘domain’ <simpleName> ‘:’ <type> ‘;’



<modelDecl> ::= <simpleName> ‘:’ <simpleName>

<varDeclaration> ::= <simpleName> (, <simpleName>)* ‘:’ <type> [‘=’ <OclExpression>] ‘;’

<call> ::= <simpleName> ‘(‘ <variable> (‘,’ <variable>)* ‘)’

<propertyTemplate> ::= <simpleName> ‘=’ <OclExpression> 

<para> ::= <simpleName> ‘:’ <type> 




<pathName> ::= <simpleName> <pathName2>

<pathName2> ::= ‘::’ <simpleName> <pathName2> | Ɛ

<variable> ::= <simpleName> <variable2> 

<variable2> ::= <pathName2> ‘.’ <simpleName> | Ɛ

<type> ::= <simpleName> <pathName2> | <collectionType> | <primitiveType>

<collectionType> ::= <collectionTypeIdentifier> ‘(‘ <type> ‘)’







<concatExpr> ::= <StringLit> ‘+’ (<concatExpr> | <StringLit> | <variable>) <concatExpr2>
				| <simpleName> <variable2> ‘+’ (<concatExpr> | <StringLit> | <variable>) <concatExpr2>

<concatExpr2> ::= ‘+’ (<concatExpr> | <StringLit> | <variable>) <concatExpr2> | Ɛ



<intExpr> ::= <IntegerLit> <arytmOp> (<variable> | <intExpr> | <IntegerLit>) <intExpr2>
			| <simpleName> <variable2> <arytmOp> (<variable> | <intExpr> | <IntegerLit>) <intExpr2>

<intExpr2> ::= <arytmOp> (<variable> | <intExpr> | <IntegerLit>) <intExpr2> | Ɛ



<realExpr> ::= <simpleName> <variable2> <realOp> (<variable> | <realExpr> | <RealLit>) <realExpr2>
			| <RealLit> <realOp> (<variable> | <realExpr> | <RealLit>) <realExpr2>

<realExpr2> ::= <realOp> (<variable> | <realExpr> | <RealLit>) <realExpr2> | Ɛ



<relExpr> ::= <OclExpression> <relOp> <OclExpression> 



<boolExpr> ::= <OclExpression> <relOp> <OclExpression> <boolOp> (<relExp> | <boolExpr>) <boolExpr2>
			| <BooleanLit> 

<boolExpr2> ::= <boolOp> (<relExp> | <boolExpr>) <boolExpr2> | Ɛ













<OclExpression> ::=   <simpleName> ‘(‘ <variable> (‘,’ <variable>)* ‘)’
					| <simpleName> <variable2>
					| <simpleName> <variable2> ‘:’ <pathName> ‘{‘ [<propertyTemplateList>] ‘}’
					| <simpleName> <pathName2>
					| <simpleName> <variable2> ‘+’ (<concatExpr> | <StringLit> | <variable>) <concatExpr2>
					| <simpleName> <variable2> ‘+’ (<concatExpr> | <StringLit> | <variable>) <concatExpr2>
					| <simpleName> <variable2> ‘+’ (<concatExpr> | <StringLit> | <variable>) <concatExpr2>
					| <simpleName> <variable2> ‘+’ (<concatExpr> | <StringLit> | <variable>) <concatExpr2>
					| <simpleName> <variable2> <realOp> (<variable> | <realExpr> | <RealLit>) <realExpr2>

					| <IfExp> 

					| <StringLit> | <IntegerLit> | <RealLit> | <BooleanLit> | <NullLit>

					| <StringLit> ‘+’ (<concatExpr> | <StringLit> | <variable>) <concatExpr2>
					
					| <RealLit> <realOp> (<variable> | <realExpr> | <RealLit>) <realExpr2>

					| <IntegerLit> <arytmOp> (<variable> | <intExpr> | <IntegerLit>) <intExpr2>
					

					| <OclExpression> <relOp> <OclExpression>
					| <OclExpression> <relOp> <OclExpression> <boolOp> (<relExp> | <boolExpr>) <boolExpr2>
					


<LiteralExp> ::= <StringLit> | <IntegerLit> | <RealLit> | <BooleanLit> | <NullLit>

<objectTemplate> ::= <simpleName> <variable2> ‘:’ <pathName> ‘{‘ [<propertyTemplateList>] ‘}’

<propertyTemplateList> ::= <propertyTemplate> (‘,’ <propertyTemplate>)*


